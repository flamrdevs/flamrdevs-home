---
import * as ButtonCSS from "@flamrdevs/ui/core/Button.recipe.css";
import propsplit from "@flamrdevs/x/modules/propsplit";

import { ClassesKeys, classex } from "./../classes";
import type * as Polymorphic from "./../polymorphic";

import { getButtonAttrs } from "./attributes/button";
import type { ButtonOptions } from "./attributes/button";

type Props<As extends Polymorphic.As = "button"> = Polymorphic.Props<As, ButtonOptions & ButtonCSS.Variants & ButtonCSS.InnerVariants & ButtonCSS.ChildVariants>;

const { as: As = "button", ...props } = Astro.props;

const [classes, options, recipe, attrs] = propsplit(props, ClassesKeys, ["disabled"], [...ButtonCSS.RootKeys, ...ButtonCSS.ChildKeys]);

const className = classex(ButtonCSS.Root({ color: recipe.color, size: recipe.size }), classes);
const innerClassName = ButtonCSS.Inner({ color: recipe.color });
const childClassName = ButtonCSS.Child({ font: recipe.font, size: recipe.size });
---

<As class={className} {...getButtonAttrs(As, options)} {...attrs as any}>
	<div class={innerClassName}>
		<div class={childClassName}>
			<slot />
		</div>
	</div>
</As>
